import os
import aiofiles
from openai import AsyncClient
from typing import List, Optional
from dataclasses import dataclass

import src.config as config
from .logging import LogEntry

@dataclass
class ProcessOutput:
    outline_path: str
    chatlog_path: str

OUTPUT_DIR = "wrapups"

def _to_bullet_list(items: List[any]) -> str:
    return "\n".join(f"- {str(item).replace('\n', '')}" for item in items)

_OPENAI_CLIENT: Optional[AsyncClient] = None

def _get_openai_client() -> AsyncClient:
    global _OPENAI_CLIENT
    if _OPENAI_CLIENT is None:
        _OPENAI_CLIENT = AsyncClient(api_key=config.OPENAI_API_KEY)
    return _OPENAI_CLIENT

async def process_entries(entries: List[LogEntry], name: str) -> ProcessOutput:
    """
    Given a list of log entries, sorts by timestamp, writes a chatlog, and sends to OpenAI for processing.
    The 'name' parameter determines the filenames it writes to.
    Returns the path to the generated summary markdown file.
    """
    entries.sort(key=lambda x: x.timestamp)
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    chatlog_path = os.path.join(OUTPUT_DIR, f"{name}_log.txt")
    chatlog_rows = [f"{e.user_name}: {e.content}" for e in entries]
    async with aiofiles.open(chatlog_path, "w", encoding="utf-8") as outfile:
        await outfile.write("\n".join(chatlog_rows))
    system_msg = (
        "You are an expert D&D 5e session chronicler. "
        "You will be given a raw voice chat transcript of a session. "
        "It is your job to extract a coherent story from transcription and turn it into a session outline. "
        "Your outline will be used as a reference for subsequent sessions, so it should be detailed. "
        "You should try to include defining quotes where possible. "
        "Include Any items, bonuses, and money acquired. "
        "Include any ending cliffhangers. "
        "Highlight interesting or funny moments. "
        "Be aware that the transcript is generated by an AI speech-to-text model and contains many errors, misinterpretations, and artifacts. "
        "The model may hallucinate captured noise as \"Thank you\" or \"I don't know\". or \"Bye\" or 'I love you\", and other common phrases. "
        f"{(
            "\nHere are some proper nouns that are common in our campaign that are likely to be misheard:\n"
            f"{_to_bullet_list(config.PROPER_NOUNS)}\n"
            if config.PROPER_NOUNS else ""
        )}"
        f"{(
            "\nHere are some other tips:\n"
            f"{_to_bullet_list(config.TIPS)}\n"
            if config.TIPS else ""
        )}"
    )
    user_msg = _to_bullet_list(chatlog_rows)
    print(system_msg)
    client = _get_openai_client()
    response = await client.chat.completions.create(
        model=config.OPENAI_GPT_MODEL,
        messages=[
            { "role": "system", "content": system_msg },
            { "role": "user", "content": user_msg },
        ],
        max_tokens=4096,
        temperature=0.1,
    )
    outline = response.choices[0].message.content
    md_path = os.path.join(OUTPUT_DIR, f"{name}_outline.md")
    async with aiofiles.open(md_path, "w", encoding="utf-8") as mdfile:
        await mdfile.write(outline)
    return ProcessOutput(outline_path=md_path, chatlog_path=chatlog_path)
